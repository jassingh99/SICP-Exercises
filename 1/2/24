(define (even? n)
        (= (remainder n 2) 0)
)

(define (square x)
        (* x x)
)

; exponentiation by squaring where you mod out by m after every stage
(define (expmod base exp m)
        (cond ( (= exp 0)
                1
              )
              ( (even? exp)
                (remainder (square (expmod base
                                           (/ exp 2)
                                           m
                                   )
                           )
                           m
                )
              )
              ( else
                (remainder (* base
                              (expmod base
                                      (- exp 1)
                                      m
                              )
                           )
                           m
                )
              )
        )
)

(define (fast-prime? n times)
        (define (fermat-test n)
                ; is a^n = a mod n?
                (define (try-it a)
                        ( = (expmod a n n)
                            a
                        )
                )
                (try-it (+ 1
                           (random (- n 1))
                        )
                )
        )

        ; repeat the above fermat-test 'times' many times
        (cond ( (= times 0)
                true
              )
              ( (fermat-test n)
                (fast-prime? n
                             (- times 1)
                )
              )
              ( else
                false
              )
        )
)

(define (timed-prime-test n)
        (define (report-prime elapsed-time)
        	(display " **PRIME** ")
        	(display elapsed-time)
        )  
        (define (report-composite elapsed-time)
        	(display " **COMPOSITE** ")
        	(display elapsed-time)
        )

        (newline)
        (display n)
        (define (start-timed-prime-test n start-time)
                (if (fast-prime? n 1000)
                    (report-prime (- (runtime) start-time))
		            (report-composite (- (runtime) start-time))
                )
        )
	(start-timed-prime-test n (runtime))
)

(define (search-for-primes lower upper)
        (define (search-iter i)
                (timed-prime-test i)
                (if (= i upper)
                    (newline)
                    (search-iter (+ i 2))
                )

        )

	    (define prev (runtime))
	    (search-iter lower)
	    (newline)
	    (display "*** ELAPSED RUNTIME ***")
	    (newline)
	    (display (- (runtime) prev))
)

(search-for-primes 1001 1101)
; first (before 1.23) elapsed runtime was 0.
; second (after 1.23) elapsed runtime was 0.
; third (using fast-prime?) elapsed runtime was 0.23

(search-for-primes 10001 10101)
; first (before 1.23) elapsed runtime was 0.
; second (after 1.23) elapsed runtime was 9.99...e-3
; third (using fast-prime?) elapsed runtime was 0.21

(search-for-primes 100001 100101)
; first (before 1.23) elapsed runtime was 1e-2
; second (after 1.23) elapsed runtime was 0.
; third (using fast-prime?) elapsed runtime was 0.13

(search-for-primes 100000001 100000101)
; first (before 1.23) elapsed runtime was 0.04999...
; second (after 1.23) elapsed runtime was 0.0299...
; third (using fast-prime?) elapsed runtime was 0.41

(search-for-primes 10000000001 10000000101)
; first (before 1.23) elapsed runtime was 0.42
; second (after 1.23) elapsed runtime was 0.27
; third (using fast-prime?) elapsed runtime was 0.25

(search-for-primes 1000000000001 1000000000101)
; first (before 1.23) elapsed runtime was 2.89
; second (after 1.23) elapsed runtime was 2.
; third (using fast-prime?) elapsed runtime was 0.24

(search-for-primes 100000000000001 100000000000101)
; first (before 1.23) elapsed runtime was 36.27
; second (after 1.23) elapsed runtime was 23
; third (using fast-prime?) elapsed runtime was 0.27

; i hardcoded this to do the fermat test for 1000 iterations
; this makes it a good deal slower for the smaller values, but faster for the larger values
; what is a more optimal way to decide the number of iterations?
