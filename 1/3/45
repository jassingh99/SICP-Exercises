
(define (compose f g)
        (lambda (x)
                (f (g x))
        )
)

; from 1.32
(define (accumulator combiner null-value term a b next) 
        (define (iter i result)
                (if (> i b)
                    result
                    (iter (next i)
                          (combiner (term i)
                                    result
                          )
                    )
                )
        )

        (iter a null-value)
)

(define (repeated function times)
        (accumulator compose
                     (lambda (x) x)
                     (lambda (i) function)
                     1
                     times
                     (lambda (n) (+ n 1))
        )
)

(define (average x y)
        (/ (+ x y)
           2
        )
)

(define (average-damp f)
        (lambda (x)
                (average x
                         (f x)
                )
        )
)

(define (exp b n)
        ( (repeated (lambda (x) (* b x))
                    n
          )
          1
        )
)

; returns a procedure whose argument is a positive real number x
; and whose output is the iterator for computing nth roots of x
(define (root-iter n)
        (lambda (x)
                (lambda (y)
                        (/ x
                           (exp y (- n 1))
                        )
                )
        )
)

; returns a procedure whose argument is a positive real number x
; and whose output is the iterator for computing nth roots of x after average-dampening "damp" many times
(define (damped-root-iter damp n)
        (lambda (x)
                (
                    (repeated average-damp
                              damp
                    )
                    ((root-iter n) x) ; this is the map y \mapst x/y^n
                )
        )
)

; these compute the sqrt 2 iterator on initial value 5
; since this is damping 0 times we expect them to be the same
(((root-iter 2) 2)
  5
)
(((damped-root-iter 0 2) 2)
  5
)

; here we will test the convergence of the root-iter and damped-root-iter procedures
; we're not doing anything rigorous, so we'll apply "num" iterations to starting value "start"
; and guess if it converges
(define (tester iterative-procedure num start)
        (define (loop i current-value)
                (newline)
                (display current-value)
                (cond (
                          (> i num)
                          (newline)
                          (display "DONE")
                      )
                      (
                          else
                          (loop (+ i 1)
                                (iterative-procedure current-value)
                          )
                      )
                )
        )

        (loop 1 start)
)

; we'll take num=20 and start=1.0 for all these tests
; the below will display start, f(start), f^2(start), ... f^10(start)
; where f is ((damped-root-iter n damp) x)
; i.e. the iterative thing that use to compute the n^th root of x after damp many average-dampenings
; we'll always use x=2.0, but n and damp will be changing is our tests
; divergence will be something that looks periodic, and convergence will be something that looks cauchy
(define x 2.0)
(define n 17)
(define damp 4)
(tester ((damped-root-iter damp n) x)
        20
        1.0
)

; below is the table summarizing the results
; n | min number of damps to converge
; 02 | 1
; 03 | 1
; 04 | 2
; 05 | 2
; 06 | 2
; 07 | 2
; 08 | 3
; 09 | 3
; 10 | 3
; 11 | 3
; 12 | 3
; 13 | 3
; 14 | 3
; 15 | 3
; 16 | 4
; 17 | 4
; so we guess that the min number of damps for a convergent n^th root iterator is floor(log_2(n))

; now we start defining a procedure for nth roots

(define tolerance 0.00001)
(define (fixed-point f first-guess)
        (define (close-enough? v1 v2)
                (< (abs (- v1 v2)) tolerance)
        )
        (define (try guess)
                (let ((next (f guess)))
                     (if (close-enough? guess next)
                         next
                         (try next)
                     )
                )
        )
        (newline)
        (try first-guess)
)

(define (nth-root n x)
        (define damp
                (floor (/ (log n)
                          (log 2)
                       )
                )
        )
        (fixed-point ((damped-root-iter damp n) x)
                     1.0
        )
)

; the following tests all agree with wolfram alpha
(nth-root 2 2)
(nth-root 2 4)
(nth-root 3 10)
(nth-root 18 83344.747493)
