(define tolerance 0.00001)
(define (fixed-point f first-guess)
        (define (close-enough? v1 v2)
                (< (abs (- v1 v2)) tolerance)
        )
        (define (try guess)
                (display guess)
                (newline)
                (let ((next (f guess)))
                     (if (close-enough? guess next)
                         next
                         (try next)
                     )
                )
        )
        (newline)
        (try first-guess)
)

(define dx 0.000001)
(define (deriv g)
        (lambda (x)
                (/ (- (g (+ x dx))
                      (g x)
                   )
                   dx
                )
        )
)

(define (newton-transform g)
        (lambda (x)
                (- x 
                   (/ (g x)
                      ((deriv g) x)
                   )
                )
        )
)

(define (newtons-method g guess)
        (fixed-point (newton-transform g) guess)
)

; returns the function x \mapsto x^3 + ax^2 + bx + c
(define (cubic a b c)
        (lambda (x)
                (+ (* x x x)
                   (* a x x)
                   (* b c)
                   c
                )
        )
)

; approximates 2^{1/3} ~= 1.259921049894873165...
(newtons-method (cubic 0 0 -2) 1)
