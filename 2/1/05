; first off, this all works because of the primality of 2, 3 and the fundamental theorem of arithmetic
; thank you godel!
; we'll need procedures to map (a, b) |--> 2^a 3^b
; and procedures to recover the largest powers of 2, 3 dividing some integer m

(define (exp base power)
        (define (exp-iter b n a)
                (cond ( (= n 0)
                        a
                      )
                      ( (even? n)
                        (exp-iter (square b)
                                  (/ n 2)
                                  a
                        )
                      )
                      ( else
                        (exp-iter b
                                  (- n 1)
                                  (* a b)
                        )
                      )
                )
        )

        (exp-iter base power 1)
)

; the following computes the largest k such that n^k | m
; i.e. such that n^k || m
; returns an error in the remainder procedure when n = 0
; infinite loops when m = 0, as everything divides m so we can never have n^k || 0
; these edge cases don't matter for the purposes of this exercise
(define (evenly-divides n m)
        (define (divides? a b)
                (= (remainder b a) 0)
        )

        (define (iter k running-total)
                (let ( 
                         (next (* n running-total))
                     )
                     (if (divides? next m)
                         (iter (+ k 1) next)
                         k
                     )
                )
        )
        (iter 0 1)
)

; 2^2 || 4
(evenly-divides 2 4)

; 2^0 || 5
(evenly-divides 2 5)

;2^2 || -100
(evenly-divides 2 -100)

; we now actually define out cons, car, and cdr procedures
(define (cons a b)
        (* (exp 2 a)
           (exp 3 b)
        )
)

(define (car n)
        (evenly-divides 2 n)
)

(define (cdr n)
        (evenly-divides 3 n)
)

; testing
(car (cons 4 6))
(cdr (cons 0 5))
