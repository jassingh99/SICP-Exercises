(define (square x) (* x x))

(define (direct-square-tree tree)
        (cond ( (null? tree)
                tree
              )
              ( (not (pair? tree))
                (square tree)
              )
              ( else
                (cons (direct-square-tree (car tree))
                      (direct-square-tree (cdr tree))
                )
              )
        )
)

(define (square-tree tree)
        (map (lambda (subtree)
                     (if (pair? subtree)
                         (square-tree subtree)
                         (square subtree)
                     )
             )
             tree
        )
)

(define L (list 1 (list 2 (list 3 4) 5) (list 6 7)))
L
(direct-square-tree L)
(square-tree L)
